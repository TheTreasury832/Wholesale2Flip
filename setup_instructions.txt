# üöÄ Wholesale2Flip Setup Instructions

## üìã Prerequisites

- Python 3.8 or higher
- Git
- OpenAI API account
- GitHub account (for deployment)

## üõ†Ô∏è Local Development Setup

### Step 1: Clone and Setup
```bash
# Clone the repository
git clone https://github.com/yourusername/wholesale2flip.git
cd wholesale2flip

# Create virtual environment
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

### Step 2: Configure Secrets
```bash
# Copy the secrets template
cp .streamlit/secrets.toml.example .streamlit/secrets.toml

# Edit the secrets file with your API keys
# You'll need:
# - OpenAI API Key (get from https://platform.openai.com)
```

### Step 3: Create Admin User
```bash
# Run the application first time
streamlit run app.py

# Register as a normal user first
# Then manually set admin privileges in the database
```

### Step 4: Database Setup
The SQLite database will be created automatically on first run. Tables include:
- `users` - User accounts and subscriptions
- `deals` - Deal submissions and analysis
- `contracts` - Generated documents

## üåê Deployment to Streamlit Cloud

### Step 1: GitHub Setup
```bash
# Initialize git repository (if not already done)
git init
git add .
git commit -m "Initial commit"

# Push to GitHub
git remote add origin https://github.com/yourusername/wholesale2flip.git
git branch -M main
git push -u origin main
```

### Step 2: Streamlit Cloud Deployment
1. Go to [share.streamlit.io](https://share.streamlit.io)
2. Sign in with GitHub
3. Click "New app"
4. Select your repository
5. Set main file path: `app.py`
6. Click "Deploy"

### Step 3: Configure Secrets in Streamlit Cloud
1. In your Streamlit Cloud dashboard, click on your app
2. Click "Settings" ‚Üí "Secrets"
3. Add your secrets:
```toml
[api_keys]
OPENAI_API_KEY = "your-openai-api-key"

[admin]
ADMIN_EMAIL = "admin@wholesale2flip.com"
ADMIN_PASSWORD = "your-secure-admin-password"
```

## üîë Setting Up Admin Access

### Method 1: Direct Database Access (Local)
```python
import sqlite3
import hashlib

# Connect to database
conn = sqlite3.connect('wholesale2flip.db')
cursor = conn.cursor()

# Hash your admin password
admin_password = "your-admin-password"
password_hash = hashlib.sha256(admin_password.encode()).hexdigest()

# Create admin user
cursor.execute("""
    INSERT INTO users (name, email, password_hash, subscription_tier, is_admin) 
    VALUES (?, ?, ?, ?, ?)
""", ("Admin User", "admin@wholesale2flip.com", password_hash, "enterprise", 1))

conn.commit()
conn.close()
```

### Method 2: Through Web Interface
1. Register a normal account
2. Access the database directly to set `is_admin = 1` for your user
3. Or contact support to upgrade your account

## üß™ Testing Your Setup

### 1. Basic Functionality Test
- [ ] App loads without errors
- [ ] User registration works
- [ ] User login works
- [ ] Deal calculator loads
- [ ] Admin dashboard accessible (if admin)

### 2. Feature Testing
- [ ] Deal calculation works
- [ ] Contract generation works
- [ ] LOI generation works
- [ ] Deal saving to database
- [ ] Admin can view all deals

### 3. Subscription Testing
- [ ] Tier 1 features work ($10 plan)
- [ ] Tier 2 features work ($20 plan)
- [ ] Tier 3 features work ($30 plan)
- [ ] Feature restrictions work properly

## üîß Troubleshooting

### Common Issues

#### 1. OpenAI API Errors
```bash
# Error: "OpenAI API key not found"
# Solution: Check your secrets.toml file
# Make sure OPENAI_API_KEY is correctly set
```

#### 2. Database Issues
```bash
# Error: "database is locked"
# Solution: Close all connections to the database
# Restart the application
```

#### 3. Streamlit Cloud Deployment Issues
```bash
# Error: "Module not found"
# Solution: Check requirements.txt includes all dependencies
# Make sure you're using the correct Python version
```

#### 4. Admin Access Issues
```bash
# Error: "Access denied. Admin privileges required."
# Solution: Set is_admin = 1 in the users table for your account
```

## üìä Database Management

### Backup Database
```bash
# Create backup of SQLite database
cp wholesale2flip.db wholesale2flip_backup_$(date +%Y%m%d).db
```

### View Database Contents
```bash
# Install SQLite browser or use command line
sqlite3 wholesale2flip.db

# Common queries:
.tables                          # List all tables
SELECT * FROM users;             # View all users
SELECT * FROM deals;             # View all deals
SELECT COUNT(*) FROM users;      # Count users
```

### Reset Database
```bash
# Delete database to start fresh
rm wholesale2flip.db
# Restart the application to recreate tables
```

## üé® Customization Guide

### 1. Branding Changes
Edit the CSS in `app.py` function `load_css()`:
```css
/* Change primary colors */
:root {
    --primary-color: #your-color;
    --secondary-color: #your-color;
}
```

### 2. Contract Templates
Modify `ContractGenerator` class methods:
- `generate_wholesale_contract()`
- `generate_loi()`

### 3. Subscription Tiers
Update pricing in `show_home_page()` function and database logic.

### 4. Adding New Features
1. Add database tables in `DatabaseManager.init_database()`
2. Create new functions for your features
3. Add navigation in the sidebar
4. Update the admin dashboard as needed

## üöÄ Performance Optimization

### 1. Database Optimization
```python
# Add indexes for frequently queried columns
cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_id ON deals(user_id)")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_created_at ON deals(created_at)")
```

### 2. Streamlit Optimization
```python
# Use caching for expensive operations
@st.cache_data
def expensive_calculation():
    # Your calculation here
    pass
```

### 3. Production Database
For production, consider upgrading to PostgreSQL:
```python
# Install psycopg2
pip install psycopg2-binary

# Update connection string
DATABASE_URL = "postgresql://user:password@host:port/database"
```

## üìà Monitoring & Analytics

### 1. User Activity Tracking
Add logging to track:
- User registrations
- Deal submissions
- Contract generations
- Subscription upgrades

### 2. Error Monitoring
```python
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Log important events
logger.info(f"User {user_id} submitted deal {deal_id}")
```

### 3. Performance Monitoring
- Monitor response times
- Track database query performance
- Monitor API usage (OpenAI)

## üîê Security Best Practices

### 1. Password Security
- Passwords are hashed with SHA-256
- Consider upgrading to bcrypt for production
- Implement password strength requirements

### 2. API Key Security
- Never commit API keys to version control
- Use Streamlit secrets management
- Rotate API keys regularly

### 3. Database Security
- Use parameterized queries (already implemented)
- Regular backups
- Consider encryption for sensitive data

## üìû Support & Maintenance

### Regular Maintenance Tasks
- [ ] Weekly database backups
- [ ] Monthly security updates
- [ ] Quarterly feature reviews
- [ ] Annual license renewals

### Getting Help
- Check the documentation
- Review common issues above
- Contact support: support@wholesale2flip.com
- Join the community Discord

## üéØ Next Steps

After successful setup:
1. **Test all features thoroughly**
2. **Set up regular backups**
3. **Configure monitoring**
4. **Train your team on admin dashboard**
5. **Launch to your users**

---

**Setup Complete! üéâ**

Your Wholesale2Flip platform is now ready for real estate wholesaling success!